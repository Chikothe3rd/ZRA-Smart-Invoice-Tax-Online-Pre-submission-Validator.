import { ProcessedFile, ValidationStats } from '@/types';

/**
 * Generate a detailed validation report in CSV format
 */
export function generateCSVReport(processedFiles: ProcessedFile[]): Blob {
  const headers = [
    'File Name',
    'File Type',
    'Issue Severity',
    'Field',
    'Category',
    'Message',
    'Original Value',
    'Corrected Value',
    'Auto Fixed',
    'Confidence',
  ];

  const rows = processedFiles.flatMap((file) =>
    file.result.issues.map((issue) => [
      file.name,
      file.type,
      issue.severity,
      issue.field,
      issue.category || 'N/A',
      issue.message,
      issue.originalValue || 'N/A',
      issue.fixedValue || 'N/A',
      issue.autoFixed ? 'Yes' : 'No',
      issue.confidence || 'N/A',
    ])
  );

  const csv = [headers, ...rows]
    .map((row) => row.map((cell) => `"${String(cell).replace(/"/g, '""')}"`).join(','))
    .join('\n');

  return new Blob([csv], { type: 'text/csv;charset=utf-8;' });
}

/**
 * Generate a summary report in markdown format
 */
export function generateMarkdownReport(processedFiles: ProcessedFile[]): Blob {
  const stats: ValidationStats = processedFiles.reduce(
    (acc, file) => {
      file.result.issues.forEach((issue) => {
        acc.totalIssues++;
        if (issue.severity === 'error') acc.criticalErrors++;
        if (issue.severity === 'warning') acc.warnings++;
        if (issue.autoFixed) acc.autoFixed++;
        if (issue.severity === 'error' && !issue.autoFixed) acc.manualReviewNeeded++;
        
        const category = issue.category || 'other';
        acc.byCategory[category] = (acc.byCategory[category] || 0) + 1;
      });
      return acc;
    },
    {
      totalIssues: 0,
      criticalErrors: 0,
      warnings: 0,
      infoMessages: 0,
      autoFixed: 0,
      manualReviewNeeded: 0,
      byCategory: {},
    } as ValidationStats
  );

  const complianceRate = stats.totalIssues > 0 
    ? Math.round((stats.autoFixed / stats.totalIssues) * 100) 
    : 100;

  const markdown = `# ZRA Validation Report

Generated: ${new Date().toLocaleString()}

## Summary

- **Files Processed**: ${processedFiles.length}
- **Total Issues**: ${stats.totalIssues}
- **Critical Errors**: ${stats.criticalErrors}
- **Warnings**: ${stats.warnings}
- **Auto-Fixed**: ${stats.autoFixed}
- **Manual Review Required**: ${stats.manualReviewNeeded}
- **Compliance Rate**: ${complianceRate}%

## Issues by Category

${Object.entries(stats.byCategory)
  .sort(([, a], [, b]) => b - a)
  .map(([category, count]) => `- **${category}**: ${count}`)
  .join('\n')}

## File Details

${processedFiles
  .map(
    (file) => `
### ${file.name} (${file.type.toUpperCase()})

**Issues Found**: ${file.result.issues.length}

${file.result.issues
  .map(
    (issue, i) => `
${i + 1}. **${issue.severity.toUpperCase()}** - ${issue.field}
   - Message: ${issue.message}
   - Original: ${issue.originalValue || 'N/A'}
   - Corrected: ${issue.fixedValue || 'N/A'}
   - Auto-Fixed: ${issue.autoFixed ? '✓' : '✗'}
`
  )
  .join('\n')}
`
  )
  .join('\n---\n')}

## Recommendations

${stats.manualReviewNeeded > 0 
  ? `⚠️ **Action Required**: ${stats.manualReviewNeeded} critical issue(s) need manual review before ZRA submission.` 
  : '✓ All issues have been automatically corrected. Ready for ZRA submission.'}

---
*Generated by ZRA Tax Validation Tool*
`;

  return new Blob([markdown], { type: 'text/markdown;charset=utf-8;' });
}
